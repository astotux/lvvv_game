const canvas = document.getElementById("game");
const ctx = canvas.getContext("2d");
let viewW = window.innerWidth;
let viewH = window.innerHeight;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
ctx.imageSmoothingEnabled = false;
ctx.imageSmoothingQuality = 'high';

function resizeCanvas() {
  const dpr = window.devicePixelRatio || 1;
  viewW = window.innerWidth;
  viewH = window.innerHeight;
  canvas.width = Math.floor(viewW * dpr);
  canvas.height = Math.floor(viewH * dpr);
  canvas.style.width = viewW + "px";
  canvas.style.height = viewH + "px";

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  const ctx = canvas.getContext("2d");
  ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
  ctx.imageSmoothingEnabled = false;
  ctx.imageSmoothingQuality = 'high';
}
resizeCanvas();
window.addEventListener("resize", resizeCanvas);

// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞
let lastTime = 0;
let accumulator = 0;
const fixedTimeStep = 1000 / 60; // 60 FPS = ~16.67ms

let currentLevel = 0;
let player = {
    x: 50, y: 300, w: 38, h: 64,
    dx: 0, dy: 0, onGround: false,
    frame: 0,         // —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
    frameTick: 0,     // —Å—á—ë—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    state: "idle",    // idle | walk-left | walk-right
    idleTimer: 0,     // —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç–æ—è–Ω–∏—è
    prevState: "idle",
  };

// –ö–æ–º–ø–∞–Ω—å–æ–Ω, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –∏–≥—Ä–æ–∫–æ–º
let companion = {
    x: 50, y: 300, w: 56, h: 49,
    dx: 0, dy: 0, onGround: false,
    frame: 0,         // —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∞–Ω–∏–º–∞—Ü–∏–∏
    frameTick: 0,     // —Å—á—ë—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    state: "idle",    // idle | walk-left | walk-right
    idleTimer: 0,     // —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç–æ—è–Ω–∏—è
    targetX: 50,      // —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è X
    targetY: 300,     // —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è Y
    followDelay: 0.09, // –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (0.15 = –±—ã—Å—Ç—Ä–µ–µ, 0.1 = –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    prevState: "idle",
  };
  
let keys = {left:false,right:false};
let cameraX = 0;
let gameOver = false;
let activeCharacter = "player"; // –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–º

let totalCoins = 0; // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç–æ–∫
let coinAnimation = 0; // –∞–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç–æ–∫

// –§–ª–∞–≥ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –∫ —Ü–µ–Ω—Ç—Ä—É –∏–≥—Ä–æ–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞
let companionLockToCenter = false;

// –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
const modal = document.getElementById("modal");
const modalTitle = document.getElementById("modalTitle");
const modalText = document.getElementById("modalText");
const modalBtn = document.getElementById("modalBtn");

let modalCallback = ()=>{};
function showModal(title, text, callback) {
  modalTitle.textContent = title;
  modalText.textContent = text;
  modal.style.display = "flex";
  modalCallback = callback;
}
modalBtn.onclick = ()=>{
  modal.style.display = "none";
  modalCallback();
};

// —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
document.getElementById("left").onmousedown = ()=>{
    keys.left=true
};
document.getElementById("left").ontouchstart = ()=>{
  keys.left=true
};
document.getElementById("right").onmousedown = ()=>{
    keys.right=true;
};
document.getElementById("right").ontouchstart = ()=>{
  keys.right=true
};


document.addEventListener('keydown', function(event) {
  if (event.code == 'KeyA') {
    keys.left=true;
  }
  if (event.code == 'KeyD') {
    keys.right=true;
  }
  if (event.code == 'KeyW' || event.code == 'Space') {
    jump();
  }
  if (event.code == 'KeyE') {
    activeCharacter = activeCharacter === "player" ? "companion" : "player";
  }
});

document.addEventListener('keyup', function(event) {
  if (event.code == 'KeyA') {
    keys.left=false;
  }
  if (event.code == 'KeyD') {
    keys.right=false;
  }
});


document.getElementById("left").onmouseup = ()=>{
  keys.left=false;
};
document.getElementById("right").onmouseup = ()=>{
  keys.right=false;
};
document.getElementById("left").ontouchend = ()=>{
keys.left=false
};
document.getElementById("right").ontouchend = ()=>{
keys.right=false
};


const jump = ()=>{
  if(player.onGround && !gameOver && activeCharacter === "player") {
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ –ø—Ä—ã–∂–∫–∞
    player.dy = -15;
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä—ã–∂–æ–∫: –º—è–≥–∫–æ —Ç—è–Ω–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É –≤ –≤–æ–∑–¥—É—Ö–µ, –±–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
    companion.dy = -15;
    companionLockToCenter = true;
    player.idleTimer = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ
  } else if(companion.onGround && !gameOver && activeCharacter === "companion") {
    companion.dy = -15;
    companion.idleTimer = 0;
  }
};

document.getElementById("jump").onmousedown = ()=>{ 
  jump();
};
document.getElementById("jump").ontouchstart = ()=>{
  jump();
};
// document.getElementById("switch").onclick = ()=>{
//   activeCharacter = activeCharacter === "player" ? "companion" : "player";
// };
document.getElementById("switch").ontouchstart = ()=>{
  activeCharacter = activeCharacter === "player" ? "companion" : "player";
};
document.getElementById("level").innerText = currentLevel+1

function resetPlayer() {
  player.x=50; player.y=250; player.dy=0;
  player.idleTimer = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  gameOver=false;
  totalCoins = 0
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
  companion.x = 50; companion.y = 250; companion.dy = 0;
  companion.idleTimer = 0;
  companion.targetX = 50; companion.targetY = 250;

  let lvl = levels[currentLevel];
  if (lvl.coins) {
    lvl.coins.forEach(coin => {
      coin.collected = false;
    });
  }

  document.getElementById("level").innerText = currentLevel+1
}

function updateCoins () {
  totalCoins++;
  document.getElementById('totalCoins').innerText = `${totalCoins} | ${levels[currentLevel].coins.length}`
}

function update() {
  if(gameOver) return;

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  if (activeCharacter === "player") {
    // –£–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–º
    player.dx = 0;
    if (keys.left) player.dx = -5; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    if (keys.right) player.dx = 5;
    player.dy += 1; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è

    player.x += player.dx;
    player.y += player.dy;
    player.onGround = false;

    let lvl = levels[currentLevel];

    // –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
    lvl.platforms.forEach(p=>{
      if(player.x < p.x+p.w && player.x+player.w > p.x &&
         player.y < p.y+p.h && player.y+player.h > p.y){
           if(player.dy>0){ 
             // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∫–æ–ª–ª–∏–∑–∏—è - —Å—Ç–∞–≤–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–æ—á–Ω–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
             player.y = p.y - player.h; 
             player.dy = 0; 
             player.onGround = true; 
           }
      }
    });

    // –ª–æ–≤—É—à–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    lvl.traps.forEach(t=>{
      if(player.x < t.x+t.w && player.x+player.w > t.x &&
         player.y < t.y+t.h && player.y+player.h > t.y){
           gameOver = true;
           showModal("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üíÄ","–¢—ã –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–∞ —à–∏–ø—ã!", ()=>resetPlayer());
      }
    });

    // —Ñ–∏–Ω–∏—à –¥–ª—è –∏–≥—Ä–æ–∫–∞
    let f = lvl.finish;
    if(player.x < f.x+f.w && player.x+player.w > f.x &&
       player.y < f.y+f.h && player.y+player.h > f.y){
         showModal(lvl.gift.title, lvl.gift.desc, ()=>{
           currentLevel++;
           if(currentLevel>=levels.length){
             showModal("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâ","–¢—ã –ø—Ä–æ—à–ª–∞ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!", ()=>{currentLevel=0; resetPlayer();});
           } else {
             resetPlayer();
           }
         });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç–æ–∫ –∏–≥—Ä–æ–∫–æ–º
    if (lvl.coins) {
      lvl.coins.forEach(coin => {
        if (!coin.collected && 
            player.x < coin.x + coin.w && player.x + player.w > coin.x &&
            player.y < coin.y + coin.h && player.y + player.h > coin.y) {
          coin.collected = true;
          updateCoins()
          // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç–∫–∏
          coinAnimation = 30; // 30 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        }
      });
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    if (player.dx > 0) {
        player.state = "walk-right";
        player.idleTimer = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
    } else if (player.dx < 0) {
        player.state = "walk-left";
        player.idleTimer = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
    } else {
        player.state = "idle";
        player.idleTimer++; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–æ—è–Ω–∏—è
    }

    // –°–±—Ä–æ—Å –∫–∞–¥—Ä–∞/—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (player.state !== player.prevState) {
        player.frameTick = 0;
        player.frame = 0;
        player.prevState = player.state;
    }
    
    // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–¥—Ä—ã –∏–≥—Ä–æ–∫–∞
    player.frameTick += 1 // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
    if (player.state === "idle") {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ (12 –∫–∞–¥—Ä–æ–≤ = 5 FPS)
        if (player.frameTick > 15) {
            player.frameTick = 0;
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥ (600 –∫–∞–¥—Ä–æ–≤ –ø—Ä–∏ 60 FPS)
            if (player.idleTimer > 600) {
                player.frame++;
                if (player.frame > 15) player.frame = 0; // idle 16 –∫–∞–¥—Ä–æ–≤
            } else {
                player.frame = 0; // –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –¥–æ 10 —Å–µ–∫—É–Ω–¥
            }
        }
    } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã –±—ã—Å—Ç—Ä–µ–µ (3 –∫–∞–¥—Ä–∞ = 20 FPS)
        if (player.frameTick > 3) {
            player.frameTick = 0;
            player.frame++;
            if (player.frame > 9) player.frame = 0; // walk 10 –∫–∞–¥—Ä–æ–≤
        }
    }

    // –∫–∞–º–µ—Ä–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞)
    cameraX = player.x - viewW/2;
    if(cameraX < 0) cameraX = 0;
    if(cameraX > lvl.width - viewW) cameraX = lvl.width - viewW;
    cameraX = Math.round(cameraX);

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥—Ä–æ–∫ –≤—ã–ø–∞–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞ (–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞)
    if (player.y > viewH + 100 || player.x < -200 || player.x > lvl.width + 200) {
      gameOver = true;
      showModal("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üíÄ","–¢—ã —É–ø–∞–ª–∞ –≤ –ø—Ä–æ–ø–∞—Å—Ç—å!", ()=>resetPlayer());
    }
  } else {
    // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º
    companion.dx = 0;
    if (keys.left) companion.dx = -4; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    if (keys.right) companion.dx = 4;
    companion.dy += 1; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è

    companion.x += companion.dx;
    companion.y += companion.dy;
    companion.onGround = false;

    let lvl = levels[currentLevel];

    // –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    lvl.platforms.forEach(p=>{
      if(companion.x < p.x+p.w && companion.x+companion.w > p.x &&
         companion.y < p.y+p.h && companion.y+companion.h > p.y){
           if(companion.dy>0){ 
             companion.y = p.y - companion.h; 
             companion.dy = 0; 
             companion.onGround = true; 
           }
      }
    });

    // –ª–æ–≤—É—à–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    lvl.traps.forEach(t=>{
      if(companion.x < t.x+t.w && companion.x+companion.w > t.x &&
         companion.y < t.y+t.h && companion.y+companion.h > t.y){
           gameOver = true;
           showModal("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üíÄ","–ö–æ–º–ø–∞–Ω—å–æ–Ω –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ —à–∏–ø—ã!", ()=>resetPlayer());
      }
    });

    // —Ñ–∏–Ω–∏—à –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    let f = lvl.finish;
    if(companion.x < f.x+f.w && companion.x+companion.w > f.x &&
       companion.y < f.y+f.h && companion.y+companion.h > f.y){
         showModal(lvl.gift.title, lvl.gift.desc, ()=>{
           currentLevel++;
           if(currentLevel>=levels.length){
             showModal("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâ","–¢—ã –ø—Ä–æ—à–ª–∞ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!", ()=>{currentLevel=0; resetPlayer();});
           } else {
             resetPlayer();
           }
         });
    }


    if (lvl.coins) {
      lvl.coins.forEach(coin => {
        if (!coin.collected && 
            companion.x < coin.x + coin.w && companion.x + companion.w > coin.x &&
            companion.y < coin.y + coin.h && companion.y + companion.h > coin.y) {
          coin.collected = true;
          updateCoins()
          // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç–∫–∏
          coinAnimation = 30; // 30 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        }
      });
    }

    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    if (companion.dx > 0) {
        companion.state = "walk-right";
        companion.idleTimer = 0;
    } else if (companion.dx < 0) {
        companion.state = "walk-left";
        companion.idleTimer = 0;
    } else {
        companion.state = "idle";
        companion.idleTimer++;
    }

    // –°–±—Ä–æ—Å –∫–∞–¥—Ä–∞/—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (companion.state !== companion.prevState) {
        companion.frameTick = 0;
        companion.frame = 0;
        companion.prevState = companion.state;
    }
    
    companion.frameTick++; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
    if (companion.state === "idle") {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ (6 –∫–∞–¥—Ä–æ–≤ = 10 FPS)
        if (companion.frameTick > 6) {
            companion.frameTick = 0;
            if (companion.idleTimer > 600) {
                companion.frame++;
                if (companion.frame > 8) companion.frame = 0;
            } else {
                companion.frame = 0;
            }
        }
    } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã –±—ã—Å—Ç—Ä–µ–µ (2 –∫–∞–¥—Ä–∞ = 30 FPS)
        if (companion.frameTick > 2) {
            companion.frameTick = 0;
            companion.frame++;
            if (companion.frame > 10) companion.frame = 0;
        }
    }

    // –∫–∞–º–µ—Ä–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞)
    cameraX = companion.x - viewW/2;
    if(cameraX < 0) cameraX = 0;
    if(cameraX > lvl.width - viewW) cameraX = lvl.width - viewW;
    cameraX = Math.round(cameraX);

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–ø–∞–Ω—å–æ–Ω –≤—ã–ø–∞–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞ (–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞)
    if (companion.y > viewH + 100 || companion.x < -200 || companion.x > lvl.width + 200) {
      gameOver = true;
      showModal("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ üíÄ","–ö–æ–º–ø–∞–Ω—å–æ–Ω —É–ø–∞–ª –≤ –ø—Ä–æ–ø–∞—Å—Ç—å!", ()=>resetPlayer());
    }
  }
  
  // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  if (activeCharacter === "player") {
    updateCompanion();
  } else {
    updatePlayer();
  }
}
  
  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
  function updateCompanion() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –¥–æ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    let distanceToPlayer = Math.abs(companion.x - player.x);
    let maxDistance = 40; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    companion.targetY = player.y;
    
    // –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∏–≥—Ä–æ–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    if (distanceToPlayer > maxDistance) {
      if (companion.x < player.x) {
        // –ö–æ–º–ø–∞–Ω—å–æ–Ω —Å–ª–µ–≤–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ - –∏–¥–µ–º –≤–ø—Ä–∞–≤–æ
        companion.targetX = player.x - maxDistance;
      } else {
        // –ö–æ–º–ø–∞–Ω—å–æ–Ω —Å–ø—Ä–∞–≤–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞ - –∏–¥–µ–º –≤–ª–µ–≤–æ
        companion.targetX = player.x + maxDistance;
      }
    } else {
      // –ö–æ–º–ø–∞–Ω—å–æ–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–¥–∏—É—Å–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –º–µ—Å—Ç–µ
      companion.targetX = companion.x;
    }
    
    // –ü–ª–∞–≤–Ω–æ –¥–≤–∏–≥–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –∫ —Ü–µ–ª–∏ –ø–æ X
    companion.x += (companion.targetX - companion.x) * companion.followDelay;
    
    // –ü–ª–∞–≤–Ω–æ –¥–≤–∏–≥–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –∫ —Ü–µ–ª–∏ –ø–æ Y 
    companion.y += (companion.targetY - companion.y) * companion.followDelay;
    
    // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ (—É–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
    companion.dy += 1; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –±–µ–∑ deltaTime
    companion.y += companion.dy;
    companion.onGround = false;
    
    // –ö–æ–ª–ª–∏–∑–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    let lvl = levels[currentLevel];
    lvl.platforms.forEach(p => {
      if (companion.x < p.x + p.w && companion.x + companion.w > p.x &&
          companion.y < p.y + p.h && companion.y + companion.h > p.y) {
        if (companion.dy > 0) {
          companion.y = p.y - companion.h;
          companion.dy = 0;
          companion.onGround = true;
        }
      }
    });

    // –ú—è–≥–∫–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∏–≥—Ä–æ–∫–∞ –≤ –≤–æ–∑–¥—É—Ö–µ, —á—Ç–æ–±—ã –ø—Ä–∏–∑–µ–º–ª–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ
    if (activeCharacter === "player") {
      const centerX = player.x + (player.w - companion.w) / 2;
      if (companionLockToCenter) {
        const followStrength = 0.15; // –ø–ª–∞–≤–Ω–æ—Å—Ç—å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –ø–æ X
        companion.x += (centerX - companion.x) * followStrength;
      }
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–¥–µ–Ω–∏—è: –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω —Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ –∏–≥—Ä–æ–∫–∞, —É—Å–∫–æ—Ä—è–µ–º –ø–æ–¥—Ç—è–∂–∫—É –ø–æ Y
      const maxVerticalLag = 140;
      if (companion.y - player.y > maxVerticalLag) {
        companion.y = player.y - 2;
        companion.dy = 0;
      }
      // –°–Ω—è—Ç–∏–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏: –∫–æ–≥–¥–∞ –æ–±–∞ –Ω–∞ –∑–µ–º–ª–µ, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
      if (player.onGround && companion.onGround && companionLockToCenter) {
        companionLockToCenter = false;
        companion.state = "idle";
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    let currentDistance = Math.abs(companion.x - player.x);
    let isMoving = Math.abs(companion.x - companion.targetX) > 3; // —É–º–µ–Ω—å—à–∏–ª–∏ –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏

    if (companionLockToCenter && activeCharacter === "player") {
      // –í–æ –≤—Ä–µ–º—è –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ —Ü–µ–Ω—Ç—Ä—É –∏–≥—Ä–æ–∫–∞
      const centerX = player.x + (player.w - companion.w) / 2;
      const dxToCenter = centerX - companion.x;
      if (Math.abs(dxToCenter) > 1) {
        companion.state = dxToCenter > 0 ? "walk-right" : "walk-left";
        companion.idleTimer = 0;
      } else {
        companion.state = "idle";
        companion.idleTimer++;
      }
    } else {
      if (isMoving && currentDistance > 15) {
        // –ö–æ–º–ø–∞–Ω—å–æ–Ω –¥–≤–∏–∂–µ—Ç—Å—è –∫ –∏–≥—Ä–æ–∫—É
        if (companion.x < companion.targetX) {
          companion.state = "walk-right";
        } else {
          companion.state = "walk-left";
        }
        companion.idleTimer = 0;
      } else {
        // –ö–æ–º–ø–∞–Ω—å–æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
        companion.state = "idle";
        companion.idleTimer++;
      }
    }

    // –°–±—Ä–æ—Å –∫–∞–¥—Ä–∞/—Ç–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (companion.state !== companion.prevState) {
        companion.frameTick = 0;
        companion.frame = 0;
        companion.prevState = companion.state;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    companion.frameTick++; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ –∫–∞–¥—Ä–æ–≤
    if (companion.state === "idle") {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω–µ–µ (6 –∫–∞–¥—Ä–æ–≤ = 10 FPS)
        if (companion.frameTick > 24) {
            companion.frameTick = 0;
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 10 —Å–µ–∫—É–Ω–¥
            if (companion.idleTimer > 600) {
                companion.frame++;
                if (companion.frame > 8) companion.frame = 0;
            } else {
                companion.frame = 0;
            }
        }
    } else {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥—å–±—ã –±—ã—Å—Ç—Ä–µ–µ (2 –∫–∞–¥—Ä–∞ = 30 FPS)
        if (companion.frameTick > 2) {
            companion.frameTick = 0;
            companion.frame++;
            if (companion.frame > 10) companion.frame = 0;
        }
    }
  }
  
  // üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (–∫–æ–≥–¥–∞ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
  function updatePlayer() {
    // –ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ, –Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
    player.dy += 0.1; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –±–µ–∑ deltaTime
    player.y += player.dy;
    player.onGround = false;
    
    // –ö–æ–ª–ª–∏–∑–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    let lvl = levels[currentLevel];
    lvl.platforms.forEach(p => {
      if (player.x < p.x + p.w && player.x + player.w > p.x &&
          player.y < p.y + p.h && player.y + player.h > p.y) {
        if (player.dy > 0) {
          player.y = p.y - player.h;
          player.dy = 0;
          player.onGround = true;
        }
      }
    });
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    player.state = "idle";
    player.idleTimer++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    player.frameTick++;
    if (player.state === "idle") {
        if (player.frameTick > 15) {
            player.frameTick = 0;
            if (player.idleTimer > 600) {
                player.frame++;
                if (player.frame > 15) player.frame = 0;
            } else {
                player.frame = 0;
            }
        }
    } else {
        if (player.frameTick > 3) {
            player.frameTick = 0;
            player.frame++;
            if (player.frame > 9) player.frame = 0;
        }
    }

  }
  
  // –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
// const imgPlayer = new Image();
// imgPlayer.src = "img/player.png";

// –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const imgPlayerIdle = new Image();
imgPlayerIdle.src = "img/player_idle.png"; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 4 –∫–∞–¥—Ä–∞

const imgPlayerWalk = new Image();
imgPlayerWalk.src = "img/player_walk2.png"; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 4 –∫–∞–¥—Ä–æ–≤

const imgCompanionIdle = new Image();
imgCompanionIdle.src = "img/cato_idle.png"; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 4 –∫–∞–¥—Ä–∞

const imgCompanionWalk = new Image();
imgCompanionWalk.src = "img/cato_walk.png"; // –Ω–∞–ø—Ä–∏–º–µ—Ä, 4 –∫–∞–¥—Ä–æ–≤


// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
const imgPlatformGrass = new Image();
imgPlatformGrass.src = "img/platform_grass.png";

const imgPlatformStone = new Image();
imgPlatformStone.src = "img/platform_stone.png";

const imgPlatformStone2 = new Image();
imgPlatformStone2.src = "img/platform_stone2.png";

const imgPlatformWood = new Image();
imgPlatformWood.src = "img/platform_wood.png";

const imgTrap = new Image();
imgTrap.src = "img/trap.png";

const imgFinish = new Image();
imgFinish.src = "img/finish.png";

// –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ü–∏–π
const imgFlower1 = new Image();
imgFlower1.src = "img/flower1.png";

const imgFlower2 = new Image();
imgFlower2.src = "img/flower2.png";

// const imgFlower3 = new Image();
// imgFlower3.src = "img/flower3.png";

// const imgFlower4 = new Image();
// imgFlower4.src = "img/flower4.png";

// const imgBush1 = new Image();
// imgBush1.src = "img/bush1.png";

// const imgBush2 = new Image();
// imgBush2.src = "img/bush2.png";

// const imgBush3 = new Image();
// imgBush3.src = "img/bush3.png";

// const imgBush4 = new Image();
// imgBush4.src = "img/bush4.png";

const imgRock1 = new Image();
imgRock1.src = "img/rock1.png";

const imgRock2 = new Image();
imgRock2.src = "img/rock2.png";

const imgGrass1 = new Image();
imgGrass1.src = "img/grass1.png";

const imgMountain = new Image();
imgMountain.src = "img/mountain.png";

const imgBackgroundAll = new Image();
imgBackgroundAll.src = "img/background_all.png";

// –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
const bgLayer0 = new Image(); // –¥–∞–ª—å–Ω–∏–π —Ñ–æ–Ω
bgLayer0.src = "img/background_0.png";

const bgLayer1 = new Image(); // –¥–∞–ª—å–Ω–∏–π —Ñ–æ–Ω
bgLayer1.src = "img/background_1.png";

const bgLayer2 = new Image();
bgLayer2.src = "img/background_2.png";

const bgLayer3 = new Image();
bgLayer3.src = "img/background_3.png";

const bgLayer4 = new Image();
bgLayer4.src = "img/background_4.png";

const bgLayer5 = new Image();
bgLayer5.src = "img/background_6.png";

const bgLayer6 = new Image();
bgLayer6.src = "img/background_5.png";

const imgCoin = new Image();
imgCoin.src = "img/mini_coin.png";

function getGroundY() {
  let lvl = levels[currentLevel];
  let maxY = 0;
  lvl.platforms.forEach(p => {
    if (p.y > maxY) maxY = p.y; // –∏—â–µ–º —Å–∞–º—É—é –Ω–∏–∂–Ω—é—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
  });
  return maxY; // +50 —á—Ç–æ–±—ã —Ñ–æ–Ω –Ω–µ–º–Ω–æ–≥–æ ¬´–∑–∞—Ö–æ–¥–∏–ª¬ª –≤–Ω–∏–∑
}


// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–µ–∫–æ—Ä–∞—Ü–∏–π
function drawDecorations() {
  let lvl = levels[currentLevel];
  
  if (lvl.decorations) {
    lvl.decorations.forEach(dec => {
      let img;
      
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
      switch(dec.image) {
        case "flower1": img = imgFlower1; break;
        case "flower2": img = imgFlower2; break;
        // case "flower3": img = imgFlower3; break;
        // case "flower4": img = imgFlower4; break;
        // case "bush1": img = imgBush1; break;
        // case "bush2": img = imgBush2; break;
        // case "bush3": img = imgBush3; break;
        // case "bush4": img = imgBush4; break;
        case "rock1": img = imgRock1; break;
        case "rock2": img = imgRock2; break;
        case "grass1": img = imgGrass1; break;
        case "mountain": img = imgMountain; break;
        // default: img = imgFlower1; // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
      ctx.imageSmoothingEnabled = false;
      ctx.imageSmoothingQuality = 'high';
      
      // –†–∏—Å—É–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã
      ctx.drawImage(img, dec.x - cameraX, dec.y, dec.w, dec.h);
    });
  }
}

function drawDecorationsUndo() {
  let lvl = levels[currentLevel];
  
  if (lvl.decorationsUndo) {
    lvl.decorationsUndo.forEach(dec => {
      let img;
      
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
      switch(dec.image) {
        case "flower1": img = imgFlower1; break;
        case "flower2": img = imgFlower2; break;
        // case "flower3": img = imgFlower3; break;
        // case "flower4": img = imgFlower4; break;
        // case "bush1": img = imgBush1; break;
        // case "bush2": img = imgBush2; break;
        // case "bush3": img = imgBush3; break;
        // case "bush4": img = imgBush4; break;
        case "rock1": img = imgRock1; break;
        case "rock2": img = imgRock2; break;

        case "grass1": img = imgGrass1; break;
        case "mountain": img = imgMountain; break;
        // default: img = imgFlower1; // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
      ctx.imageSmoothingEnabled = false;
      ctx.imageSmoothingQuality = 'high';
      
      // –†–∏—Å—É–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã
      ctx.drawImage(img, dec.x - cameraX, dec.y, dec.w, dec.h);
    });
  }
}

function drawDecorationsUndoPlatform() {
  let lvl = levels[currentLevel];
  
  if (lvl.decorationsUndoPlatform) {
    lvl.decorationsUndoPlatform.forEach(dec => {
      let img;
      
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏
      switch(dec.image) {
        case "flower1": img = imgFlower1; break;
        case "flower2": img = imgFlower2; break;
        // case "flower3": img = imgFlower3; break;
        // case "flower4": img = imgFlower4; break;
        // case "bush1": img = imgBush1; break;
        // case "bush2": img = imgBush2; break;
        // case "bush3": img = imgBush3; break;
        // case "bush4": img = imgBush4; break;
        case "rock1": img = imgRock1; break;
        case "rock2": img = imgRock2; break;

        case "grass1": img = imgGrass1; break;
        case "mountain": img = imgMountain; break;
        // default: img = imgFlower1; // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
      ctx.imageSmoothingEnabled = false;
      ctx.imageSmoothingQuality = 'high';
      
      // –†–∏—Å—É–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫–∞–º–µ—Ä—ã
      ctx.drawImage(img, dec.x - cameraX, dec.y, dec.w, dec.h);
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–æ–Ω–µ—Ç–æ–∫
function drawCoins() {
  let lvl = levels[currentLevel];
  document.getElementById('totalCoins').innerText = `${totalCoins} | ${levels[currentLevel].coins.length}`
  if (lvl.coins) {
    lvl.coins.forEach(coin => {
      if (!coin.collected) {
        ctx.imageSmoothingEnabled = false;
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(imgCoin, coin.x - cameraX, coin.y, coin.w, coin.h);
        
        ctx.restore();
      }
    });
  }
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ñ–æ–Ω–∞ —Å –ø–∞—Ä–∞–ª–ª–∞–∫—Å–æ–º
function drawBackground() {
  const w = viewW; // –ª–æ–≥–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
  const groundY = getGroundY()+10; // –Ω–∏–∑ —Ñ–æ–Ω–∞ —Å–æ–≤–º–µ—â–∞–µ–º —Å –Ω–∏–∂–Ω–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
  const baseW = 323;
  const baseH = 302;
  const targetH = Math.max(groundY, 1); // —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–æ –≤–µ—Ä—Ö–∞ —ç–∫—Ä–∞–Ω–∞ (y=0)
  const scale = targetH / baseH;
  const tileW = Math.max(1, Math.round(baseW * scale));

  // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
  ctx.imageSmoothingEnabled = false;
  ctx.imageSmoothingQuality = 'high';

  // üîπ –î–∞–ª—å–Ω–∏–π —Å–ª–æ–π
  let x0 = -(cameraX * 0.2) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer0, x0 + i * tileW, 0, tileW, targetH);
  }

  let x1 = -(cameraX * 0.25) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer1, x1 + i * tileW, 0, tileW, targetH);
  }

  // üîπ –°—Ä–µ–¥–Ω–∏–π —Å–ª–æ–π
  let x2 = -(cameraX * 0.35) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer2, x2 + i * tileW, 0, tileW, targetH);
  }

  // üîπ –ë–ª–∏–∂–Ω–∏–π —Å–ª–æ–π
  let x3 = -(cameraX * 0.5) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer3, x3 + i * tileW, 0, tileW, targetH);
  }

  let x4 = -(cameraX * 0.65) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer4, x4 + i * tileW, 0, tileW, targetH);
  }

  let x5 = -(cameraX * 0.72) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer5, x5 + i * tileW, 0, tileW, targetH);
  }

  let x6 = -(cameraX * 0.8) % tileW;
  for (let i = -1; i <= Math.ceil(w / tileW) + 1; i++) {
    ctx.drawImage(bgLayer6, x6 + i * tileW, 0, tileW, targetH);
  }

  // üîπ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

}





  function drawPlayer() {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
    ctx.imageSmoothingEnabled = false;
    ctx.imageSmoothingQuality = 'high';
    
    let sprite, frames, frameW, frameH;
  
    if (player.state === "idle") {
      sprite = imgPlayerIdle;
      frames = 16; // –∫–∞–¥—Ä–æ–≤ –≤ idle
    } else {
      sprite = imgPlayerWalk;
      frames = 10; // –∫–∞–¥—Ä–æ–≤ –≤ walk
    }
  
    frameW = sprite.width / frames;
    frameH = sprite.height;
  
    // –∫–∞–∫–æ–π –∫–∞–¥—Ä —Ä–∏—Å—É–µ–º
    let frameX = player.frame * frameW;
  
    // üîπ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    let drawX = player.x - cameraX;
    let drawY = player.y;
    
    // –µ—Å–ª–∏ –∏–¥—ë—Ç –≤–ª–µ–≤–æ ‚Üí –∑–µ—Ä–∫–∞–ª–∏–º
    if (player.state === "walk-left") {
      ctx.save();
      ctx.scale(-1,1);
      ctx.drawImage(
        sprite,
        frameX, 0, frameW, frameH,
        -(drawX + player.w), drawY, player.w, player.h
      );
      ctx.restore();
    } else {
      ctx.drawImage(
        sprite,
        frameX, 0, frameW, frameH,
        drawX, drawY, player.w, player.h
      );
    }
  }
  
  // üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
  function drawCompanion() {
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
    ctx.imageSmoothingEnabled = false;
    ctx.imageSmoothingQuality = 'high';
    
    let sprite, frames, frameW, frameH;
  
    if (companion.state === "idle") {
      sprite = imgCompanionIdle; // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø—Ä–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
      frames = 9;
    } else {
      sprite = imgCompanionWalk;
      frames = 11;
    }
  
    frameW = sprite.width / frames;
    frameH = sprite.height;
  
    let frameX = companion.frame * frameW;
    let drawX = companion.x - cameraX;
    let drawY = companion.y;
    
    if (companion.state === "walk-left") {
      ctx.save();
      ctx.scale(-1,1);
      ctx.drawImage(
        sprite,
        frameX, 0, frameW, frameH,
        -(drawX + companion.w), drawY, companion.w, companion.h
      );
      ctx.restore();
    } else {
      ctx.drawImage(
        sprite,
        frameX, 0, frameW, frameH,
        drawX, drawY, companion.w, companion.h
      );
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    ctx.globalAlpha = 1.0;
  }
  

  function draw() {
    // –æ—á–∏—â–∞–µ–º –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–∞–º
    ctx.clearRect(0,0,viewW,viewH);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    ctx.imageSmoothingEnabled = false;
    ctx.imageSmoothingQuality = 'high';
    
    drawBackground();
    // –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ (—Ä–∏—Å—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏, –Ω–æ –Ω–∞–¥ —Ñ–æ–Ω–æ–º)
    drawDecorationsUndoPlatform();
    let lvl = levels[currentLevel];
      // –ª–æ–≤—É—à–∫–∏
      lvl.traps.forEach(t=>{
        ctx.imageSmoothingEnabled = false;
        ctx.imageSmoothingQuality = 'high';
        ctx.drawImage(imgTrap, t.x - cameraX, t.y, t.w, t.h);
      });
    // –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (—Å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è —Ç–µ–∫—Å—Ç—É—Ä–æ–π)
    lvl.platforms.forEach(p=>{
      const platformX = p.x - cameraX;
      const platformY = p.y;
      const platformW = p.w;
      const platformH = p.h;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      let textureImg = imgPlatformGrass; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (p.texture === "grass") textureImg = imgPlatformGrass;
      else if (p.texture === "stone") textureImg = imgPlatformStone;
      else if (p.texture === "stone2") textureImg = imgPlatformStone2;
      else if (p.texture === "wood") textureImg = imgPlatformWood;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç—É—Ä—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const textureW = textureImg.width;
      const textureH = textureImg.height;
      
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏
      ctx.imageSmoothingEnabled = false;
      ctx.imageSmoothingQuality = 'high';
      
      // –†–∏—Å—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è —Ç–µ–∫—Å—Ç—É—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      for (let x = 0; x < platformW; x += textureW) {
        for (let y = 0; y < platformH; y += textureH) {
          const drawW = Math.min(textureW, platformW - x);
          const drawH = Math.min(textureH, platformH - y);
          
          // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
          ctx.drawImage(
            textureImg,
            0, 0, drawW, drawH,
            platformX + x, platformY + y, drawW, drawH
          );
        }
      }
    });
    // –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ (—Ä–∏—Å—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏, –Ω–æ –Ω–∞–¥ —Ñ–æ–Ω–æ–º)
    drawDecorationsUndo();

    // –º–æ–Ω–µ—Ç–∫–∏
    drawCoins();


  

  
    // —Ñ–∏–Ω–∏—à
    let f=lvl.finish;
    ctx.imageSmoothingEnabled = false;
    ctx.imageSmoothingQuality = 'high';
    ctx.drawImage(imgFinish, f.x - cameraX, f.y, f.w, f.h);
    
    // –∏–≥—Ä–æ–∫
    drawPlayer();
    
    // –∫–æ–º–ø–∞–Ω—å–æ–Ω
    drawCompanion();
    // –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ (—Ä–∏—Å—É–µ–º –ø–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏, –Ω–æ –Ω–∞–¥ —Ñ–æ–Ω–æ–º)
    drawDecorations();
    // üîπ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–ª–ª–∏–∑–∏–∏
    if (false) { // –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏
      ctx.strokeStyle = "red";
      ctx.lineWidth = 2;
      
      // –ì—Ä–∞–Ω–∏—Ü—ã –∏–≥—Ä–æ–∫–∞
      ctx.strokeRect(player.x - cameraX, player.y, player.w, player.h);
      
      // –ì—Ä–∞–Ω–∏—Ü—ã –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
      ctx.strokeStyle = "green";
      ctx.strokeRect(companion.x - cameraX, companion.y, companion.w, companion.h);
      
      // –ì—Ä–∞–Ω–∏—Ü—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
      ctx.strokeStyle = "blue";
      lvl.platforms.forEach(p => {
        ctx.strokeRect(p.x - cameraX, p.y, p.w, p.h);
      });
    }
  }

function loop(currentTime) {
  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
  if (lastTime === 0) {
    lastTime = currentTime;
  }
  
  const deltaTime = currentTime - lastTime;
  lastTime = currentTime;
  
  // –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
  accumulator += deltaTime;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —à–∞–≥–æ–º
  while (accumulator >= fixedTimeStep) {
    update();
    accumulator -= fixedTimeStep;
  }
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  draw();
  requestAnimationFrame(loop);
}
// –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
let loaded = 0;
const bgImages = [bgLayer0, bgLayer1, bgLayer2, bgLayer3, bgLayer4, bgLayer5, bgLayer6];
const decorationImages = [imgRock1, imgRock2, imgGrass1, imgFlower1, imgFlower2, imgMountain];
const platformImages = [imgPlatformGrass, imgPlatformStone, imgPlatformWood];
const allImages = [...bgImages, ...decorationImages, ...platformImages, imgPlayerIdle, imgPlayerWalk, imgCompanionIdle, imgCompanionWalk, imgTrap, imgFinish, imgBackgroundAll];
allImages.forEach(img => {
  img.onload = () => {
    loaded++;
    if (loaded === allImages.length) {
      // –∫–æ–≥–¥–∞ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      let lvl = levels[currentLevel];
      cameraX = player.x - viewW/2;
      if(cameraX < 0) cameraX = 0;
      if(cameraX > lvl.width - viewW) cameraX = lvl.width - viewW;
      cameraX = Math.round(cameraX);
      
      loop(0);
    }
  };
});
